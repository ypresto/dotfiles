{
    // Settings
    "maxerr"        : 100, // Maximum errors before stopping.


    // Predefined globals whom JSHint will ignore.
    "browser"       : true,   // Standard browser globals e.g. `window`, `document`.

    "node"          : false,
    "rhino"         : false,
    "couch"         : false,
    "wsh"           : false,  // Windows Scripting Host.

    // "jquery"        : true,
    "jquery"        : false,
    "prototypejs"   : false,
    "mootools"      : false,
    "dojo"          : false,
/*
    "predef"        : [       // Extra globals.
        "Namespace",
        "$j",
        "sinon",
        "grunt",
        "_",
        // https://github.com/jshint/jshint/issues/265
        "asyncTest",
        "deepEqual",
        "equal",
        "expect",
        "module",
        "notDeepEqual",
        "notEqual",
        "notStrictEqual",
        "ok",
        "QUnit",
        "raises",
        "start",
        "stop",
        "strictEqual",
        "test",
        // angular test
        "inject",
        // jasmine
        "describe",
        "it",
        "expect",
        "beforeEach"
    ],
*/


    // Development.
    "debug"         : false,  // Allow debugger statements e.g. browser breakpoints.
    "devel"         : false,  // Allow development statements e.g. `console.log();`.


    // EcmaScript 5.
    "es5"           : false,  // Allow EcmaScript 5 syntax.
    "strict"        : true,   // Require `use strict` pragma in every file.
    "globalstrict"  : false,  // Allow global "use strict" (also enables 'strict').

    // Restrict
    "bitwise"       : true,   // Prohibit bitwise operators (&, |, ^, etc.).
    "curly"         : false,  // Require {} for every new block or scope.
    "eqeqeq"        : true,   // Require triple equals i.e. `===`.
    "immed"         : true,   // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
    "latedef"       : false,  // Prohibit variable use before definition.
    "noarg"         : true,   // Prohibit use of `arguments.caller` and `arguments.callee`.
    "regexp"        : true,   // Prohibit `.` and `[^...]` in regular expressions.
    "undef"         : true,   // Require all non-global variables be declared before they are used.

    // Tolerate
    "asi"           : false,  // Tolerate Automatic Semicolon Insertion (no semicolons).
    "laxbreak"      : false,  // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
    "boss"          : false,  // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
    "eqnull"        : false,  // Tolerate use of `== null`.
    "evil"          : false,  // Tolerate use of `eval`.
    "expr"          : false,  // Tolerate `ExpressionStatement` as Programs.
    "forin"         : false,  // Tolerate `for in` loops without `hasOwnPrototype`.
    "loopfunc"      : false,  // Allow functions to be defined within loops.
    "regexdash"     : false,  // Tolerate unescaped last dash i.e. `[-...]`.
    "scripturl"     : true,   // Tolerate script-targeted URLs.
    "shadow"        : false,  // Allows re-define variables later in code e.g. `var x=1; x=2;`.
    "supernew"      : false,  // Tolerate `new function () { ... };` and `new Object;`.

    // Styling
    "camelcase"     : true,   // Enforce variables to be camelCase or UPPER_CASE.
    "indent"        : 4,      // Enforce indent width.
    "newcap"        : false,  // Require capitalization of all constructor functions e.g. `new F()`.
    "noempty"       : true,   // Prohibit use of empty blocks.
    "nonew"         : false,  // Prohibit use of constructors for side-effects.
    "plusplus"      : false,  // Prohibit use of `++` & `--`.
    "sub"           : false,  // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
    "trailing"      : true    // Prohibit trailing whitespaces.
}
